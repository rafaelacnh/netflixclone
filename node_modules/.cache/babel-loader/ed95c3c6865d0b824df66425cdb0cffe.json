{"ast":null,"code":"var _jsxFileName = \"/home/rafaela/Documents/Meus_Projetos/netflixclone/src/App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable import/no-anonymous-default-export */\nimport React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [movieList, setMovieList] = useState([]); //\n\n  const [featureData, setFeatureData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      //funcao carregar tudo\n      //pegando lista total\n      let list = await Tmdb.getHomeList(); //\n\n      setMovieList(list);\n      console.log(list); //pegando featuredMovie\n\n      let originals = list.filter(item => item.slug === 'originals'); //usando filter, aqui pegamos o item do array que tem valor 'originals' na propriedade slug\n\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1)); //gerando um valor aleatorio, com metodo math.random e arredondando p/ baixo e multiplicando pelo tamanho lista -1\n\n      let chosen = originals[0].items.results[randomChosen]; //pegando filme específico\n\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      console.log(chosen);\n      console.log(chosenInfo);\n      setFeatureData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), featureData && /*#__PURE__*/_jsxDEV(FeaturedMovie, {\n      item: featureData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"lists\",\n      children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n        title: item.title,\n        items: item.items\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}, \"4PnBX0ohrzmwV5iYycxDuyq40tE=\");","map":{"version":3,"sources":["/home/rafaela/Documents/Meus_Projetos/netflixclone/src/App.js"],"names":["React","useEffect","useState","Tmdb","MovieRow","FeaturedMovie","Header","movieList","setMovieList","featureData","setFeatureData","blackHeader","setBlackHeader","loadAll","list","getHomeList","console","log","originals","filter","item","slug","randomChosen","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","map","key","title"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,WAAP;;AAGA,kBAAe,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C,CAFmB,CAE2B;;AAC9C,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,OAAO,GAAG,YAAY;AAAC;AAC3B;AACA,UAAIC,IAAI,GAAG,MAAMX,IAAI,CAACY,WAAL,EAAjB,CAF0B,CAES;;AACnCP,MAAAA,YAAY,CAACM,IAAD,CAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAJ0B,CAM1B;;AACA,UAAII,SAAS,GAAGJ,IAAI,CAACK,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,WAAlC,CAAhB,CAP0B,CAOoC;;AAC9D,UAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BC,MAA3B,GAAmC,CAApD,CAAX,CAAnB,CAR0B,CAQ2D;;AACrF,UAAIC,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BL,YAA3B,CAAb,CAT0B,CAS2B;;AACrD,UAAIQ,UAAU,GAAG,MAAM3B,IAAI,CAAC4B,YAAL,CAAkBF,MAAM,CAACG,EAAzB,EAA6B,IAA7B,CAAvB;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAYY,MAAZ;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYa,UAAZ;AACApB,MAAAA,cAAc,CAACoB,UAAD,CAAd;AACD,KAdD;;AAeAjB,IAAAA,OAAO;AACR,GAjBQ,EAiBN,EAjBM,CAAT;AAoBA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGJ,WAAW,iBAAI,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,YAFlB,eAGE;AAAS,MAAA,SAAS,EAAC,OAAnB;AAAA,gBACGF,SAAS,CAAC0B,GAAV,CAAc,CAACb,IAAD,EAAOc,GAAP,kBACb,QAAC,QAAD;AAAoB,QAAA,KAAK,EAAEd,IAAI,CAACe,KAAhC;AAAuC,QAAA,KAAK,EAAEf,IAAI,CAACM;AAAnD,SAAeQ,GAAf;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CArCD","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\n\nimport React, { useEffect, useState } from 'react';\nimport Tmdb from './Tmdb'\nimport MovieRow from './components/MovieRow'\nimport FeaturedMovie from './components/FeaturedMovie'\nimport Header from './components/Header'\nimport './App.css'\n\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([])//\n  const [featureData, setFeatureData] = useState(null)\n  const [blackHeader, setBlackHeader] = useState(false)\n\n  useEffect(() => {\n    const loadAll = async () => {//funcao carregar tudo\n      //pegando lista total\n      let list = await Tmdb.getHomeList()//\n      setMovieList(list)\n      console.log(list)\n\n      //pegando featuredMovie\n      let originals = list.filter(item => item.slug === 'originals')//usando filter, aqui pegamos o item do array que tem valor 'originals' na propriedade slug\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length -1))//gerando um valor aleatorio, com metodo math.random e arredondando p/ baixo e multiplicando pelo tamanho lista -1\n      let chosen = originals[0].items.results[randomChosen]//pegando filme específico\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n      console.log(chosen)\n      console.log(chosenInfo)\n      setFeatureData(chosenInfo)\n    }\n    loadAll()\n  }, [])\n\n\n  return (\n    <div className=\"page\">\n      <Header />\n      {featureData && <FeaturedMovie item={featureData}/>}\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items}></MovieRow>\n        ))}\n      </section>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}